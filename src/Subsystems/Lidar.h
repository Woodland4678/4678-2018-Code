// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef LIDAR_H
#define LIDAR_H
#include "Commands/Subsystem.h"
#include "WPILib.h"
#include "rplidar.h"

#define MAXANGLERANGE	45
#define MINANGLERANGE	45
#define OUTLIERCHECK	2
#define MAXDISTRANGE	300
#define MAXDISTNEWLINE	400

#define CUBEWIDTH		330.2
#define CUBEHIEGHT		279.4
#define CUBERANGEWIDTH	40
#define CUBERANGEHIEGHT	40
#define CENTRECUBE      233.5 // sqrt(2*CUBEWIDTH^2)/2

typedef struct Point_t {
	int x;
	int y;
}tpPoint;

typedef struct Line_T
	{
	tpPoint start;
	tpPoint end;

	double angle;
	int length;
	}tpLine;

typedef struct Cube_T
	{
	tpPoint location;
	int distance;
	double angle;
	}tpCube;

using namespace rp::standalone::rplidar;

/**
 *
 *
 * @author ExampleAuthor
 */
class Lidar: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	RPlidarDriver* drv;
	unsigned int currentSpeed;
	float frequency;
public:
	Lidar();
	~Lidar();
	void InitDefaultCommand() override;
	void Periodic() override;
	void Start();
	void Stop();
	float getFrequency();
	void setMotorSpeed(unsigned int pwm);
	size_t GetRawData(rplidar_response_measurement_node_t *nodes);
	size_t FilterRaw(rplidar_response_measurement_node_t *nodes, rplidar_response_measurement_node_t *filteredNodes, size_t count, double MinAngle, double MaxAngle, double MinDistance, double MaxDistance);
	size_t ConvertToXY(rplidar_response_measurement_node_t *nodes, tpPoint *out, unsigned int count);
	int FindLines(tpPoint *data, tpLine *lines, unsigned int cnt);
	int FindCubes(tpLine *lines, tpCube * cubes, unsigned int linecnt);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
};

#endif
