// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.



#include <stdio.h>
#include "DriveTrain.h"
#include "../RobotMap.h"
// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES
#include "../Commands/DriveTrainC.h"
// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=INCLUDES

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

DriveTrain::DriveTrain() : frc::Subsystem("DriveTrain") {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    leftMotor = RobotMap::driveTrainLeftMotor;
    rightMotor = RobotMap::driveTrainRightMotor;
    rightEncoder = RobotMap::driveTrainrightEncoder;
    leftEncoder = RobotMap::driveTrainleftEncoder;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    leftEncoder->SetPIDSourceType(PIDSourceType::kRate);
	leftEncoder->SetDistancePerPulse(1.0);

	rightEncoder->SetPIDSourceType(PIDSourceType::kRate);
	rightEncoder->SetDistancePerPulse(1.0);

	goToDistanceState = 0;
	startingLeftDistance = 0;
	startingRightDistance = 0;
	targetLeft = 0;
	targetRight = 0;
	currentLeft = 0;
	currentRight = 0;
	currentLeftCentimeters = 0;
	currentRightCentimeters = 0;
	leftPercentThere = 0;
	rightPercentThere = 0;
	leftMotorMultiplier = 0;
	rightMotorMultiplier = 0;
	encoderClicksPerCentimeter = 30; // 7.2;
	GO_TO_DISTANCE_CORRECTION_SPEED = 5.0;
	powerOffset = 0;
	leftPower = 0;
	rightPower = 0;
}

void DriveTrain::InitDefaultCommand() {
    // Set the default command for a subsystem here.
    // SetDefaultCommand(new MySpecialCommand());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND

        SetDefaultCommand(new DriveTrainC());

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DEFAULT_COMMAND
}

void DriveTrain::Periodic() {
    // Put code here to be run every loop

}

void DriveTrain::SetRightPower(double power) {
	rightMotor->Set(power);
}

void DriveTrain::SetLeftPower(double power) {
	leftMotor->Set(-power);
}

std::shared_ptr<frc::Encoder> DriveTrain::getLeftEncoder() {
	return leftEncoder;
}

std::shared_ptr<frc::Encoder> DriveTrain::getRightEncoder() {
	return rightEncoder;
}

bool DriveTrain::goToDistance(double rightCentimeters, double leftCentimeters, double power, int rampUpDistance, int rampDownDistance, double startingPower, double endingPower) {
	if (goToDistanceState == 0) {
		calculator.reset(new DriveMotorCalculator(getLeftEncoder()->Get(), getRightEncoder()->Get(), leftCentimeters, rightCentimeters, encoderClicksPerCentimeter));
		goToDistanceState = 1;
		return false;
	} else if (goToDistanceState == 1) {
		float left_motor_power;
		float right_motor_power;
		bool done = calculator->getMotorSpeeds(left_motor_power, right_motor_power, getLeftEncoder()->Get(), getRightEncoder()->Get());
		printf("right: %i, left: %i\n", getRightEncoder()->Get(), getLeftEncoder()->Get());
		SetRightPower(right_motor_power);
		SetLeftPower(left_motor_power);
		if (done) {
			goToDistanceState = 0;
		}
		return done;
	}
	return false;
}
// Put methods for controlling this subsystem
// here. Call these from Commands.

