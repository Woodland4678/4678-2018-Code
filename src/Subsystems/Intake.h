// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef INTAKE_H
#define INTAKE_H
#include "Commands/Subsystem.h"
#include "WPILib.h"
#include "ManipulatorArm.h"

#define WHEELSPEEDSTOPPED	0
#define WHEELSPEEDSLOW		0.1
#define WHEELSPEEDMEDIUM	0.4
#define WHEELSPEEDHIGH		0.7

/**
 *
 *
 * @author ExampleAuthor
 */
class Intake: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<WPI_TalonSRX> lifter;
	std::shared_ptr<frc::SpeedController> rightWheels;
	std::shared_ptr<frc::SpeedController> leftWheels;
	std::shared_ptr<frc::Solenoid> releaser;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

	enum IntakePositions {
		InRobot		= 0,
		Moving,
		GetCube,
	};

	enum IntakeGribber {
		Open	= 0,
		Close
	};

	enum IntakeWheelDirection {
		DirectionStopped		= 0,
		DirectionIn,
		DirectionOut,
	};

	typedef struct Status {
		int position;
		int Gribber;
		double WheelSpeed;
		int WheelDirection;
	}tpStatus;

	double posOffset;
	double multOffset;

	double origTimeStampintake;
	double lifterStartPos;
	bool moveDone;
	int moveCase;

	int intakeState;
public:

	enum IntakeWheelSpeed {
		SpeedStopped		= 0,
		SpeedSlow,
		SpeedMedium,
		SpeedHigh
	};

	Intake();
	void InitDefaultCommand() override;
	void Periodic() override;
	void setLifterPID(double p, double i, double d);
	int getLifterAngular();
	void setLifterPosition(double position);
	void release();
	void grab();
	void setRightSpeed(double power);
	void setLeftSpeed(double power);
	void getCude();
	bool lowerIntake();
	void spinForward(double power);
	void spinReverse(double power);
	void stopWheels();
	int getLifterError();
	bool lifterGoToPosition(double start, double position, double current, double time);
	double sigmod(double end, double start, double mult, double offset, double x);
	double invSigmod(double end, double start, double mult, double offset, double pnt);
	void initMovement();
	bool raiseIntake();
	double convertEncoderToRelAngle(tpArmSegment *Seg, double encoder);
	double convertRelAngleToEncoder(tpArmSegment *Seg, double angle);
	void updateEndEffector();

	tpStatus Status;
	tpArmSegment lifterSeg;

	double endEffectorX;
	double endEffectorY;

	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
};

#endif
