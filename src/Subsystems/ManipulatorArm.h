// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef MANIPULATORARM_H
#define MANIPULATORARM_H
#include <iostream>
#include <fstream>
#include "Commands/Subsystem.h"
#include "WPILib.h"

#define FINECONTROLBOXSIZE	14.0f

/**
 *
 *
 * @author ExampleAuthor
 */
 
typedef struct ArmSeg
	{
	double posX;
	double posY;
	double setPosX;
	double setPosY;
	int length;
	
	double absAngle;
	double relAngle;
	double encValue;
	
	double setAbsAngle;
	double setRelAngle;
	double setEncValue;

	double convSlope;
	double convIntercept;
	}tpArmSegment;
 
class ManipulatorArm: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<WPI_TalonSRX> shoulder;
	std::shared_ptr<WPI_TalonSRX> elbow;
	std::shared_ptr<WPI_TalonSRX> wrist;
	std::shared_ptr<WPI_VictorSPX> shoulderSlave;
	std::shared_ptr<WPI_VictorSPX> elbowSlave;
	std::shared_ptr<frc::DoubleSolenoid> claw;
	std::shared_ptr<frc::Relay> indicator;
	std::shared_ptr<frc::DigitalInput> cubeDetector;
	std::shared_ptr<frc::DoubleSolenoid> shoulderClimber;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	
	double shoulderNewSet;

	double origTimeStamp;
	double shoulderStartPos;
	double elbowStartPos;
	double wristStartPos;
	double shoulderStartPosRel;
	double elbowStartPosRel;
	double wristStartPosRel;
	bool shoulderMovement;
	double shTarget1, shTarget2, shTime, shTime1, shTime2, elTime, wrTime;
	bool shoulderMovement2;
	bool shoulderMovement3;
	bool elbowMovement;
	bool wristMovement;
	double wrDegreePerSecond, elDegreePerSecond, shDegreePerSecond;
	double shMinTime, elMinTime, wrMinTime;
	
	int positions[32][3];

	double posOffset;
	double multOffset;
	
	double elbowDeg;
	double ShoulderDeg;

	int lightCounter;
	int lightCounter2;
	int lightShowType;
	int posOutTar;
	int posOutLast;
	int pickupCount = 0;
	int pickupCount2 = 0;

	std::ofstream logfile; // stream for writing to file
	char buf[256]; // Buffer for writing data

	double joyValuesX[4];
	double joyValuesY[4];
	int joyCount = 0;
	bool joyReached4 = false;

	int pwrTable[3][4];

public:
	ManipulatorArm();
	void InitDefaultCommand() override;
	bool Init();
	void Periodic() override;
	int getShoulderAngular();
	int getWristAngular();
	int getElbowAngular();
	void setShoulderPosition(double position);
	void setElbowPosition(double position);
	void setWristPosition(double position);
	void setShoulderSpeed(double speed);
	void setElbowSpeed(double speed);
	bool shoulderGoToPosition(double start, double position, double current, double time, bool Rel = false);
	bool elbowGoToPosition(double start, double position, double current, double time, bool Rel = false);
	bool wristGoToPosition(double start, double position, double current, double time, bool Rel = false);
	double sigmod(double end, double start, double mult, double offset, double x);
	double invSigmod(double end, double start, double mult, double offset, double pnt);
	double convertShoulderToAngle(double encoder);
	double convertElbowToAngle(double encoder);
	double convertWristToAngle(double encoder);
	double convertShoulderToEncoder(double angle);
	double convertElbowToEncoder(double angle);
	double convertWristToEncoder(double angle);
	void initMovement();
	bool pickUpCube();
	bool raiseCube();
	void setShoulderPID(double p, double i, double d, int zone, double f);
	void setElbowPID(double p, double i, double d, int zone, double f);
	void setWristPID(double p, double i, double d, int zone, double f);
	bool pickUpCubeAuto();
	
	bool moveTo(int pos, double addSh = 0, double addElTime = 0);
	bool moveToRelative(int pos, double addSh = 0, double addElTime = 0);
	void setShoulderAbsAngle(double angle);
	void setElbowAbsAngle(double angle);
	void setWristAbsAngle(double angle);
	void setShoulderRelAngle(double angle);
	void setElbowRelAngle(double angle);
	void setWristRelAngle(double angle);
	void updateShoulder();
	void updateElbow();
	void updateWrist();
	void updateEndEffector();
	void updateArm();
	bool checkForCube();
	std::string getPositionStr(int pos);
	
	double convertEncoderToRelAngle(tpArmSegment *Seg, double encoder);
	double convertRelAngleToEncoder(tpArmSegment *Seg, double angle);
	bool fineMovement(double yDirection, double xDirection);
	void moveWrist(double joyValue);

	void squeeze();
	void release();
	void climber();
	void shiftToShoulder();

	bool calibrate();

	void openLog();
	void closeLog();

	tpArmSegment shoulderSeg;
	tpArmSegment elbowSeg;
	tpArmSegment wristSeg;

	int currPos;
	int targetPos;
	int prevPos;
	double endEffectorX;
	double endEffectorY;
	int fineMoveCase;
	int fineMovingGoing;
	bool isClimber = false;

	bool shChainJump = false;
	bool elChainJump = false;
	int moveCase;
	int moveCase2;
	int pickUpCase = 0;
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
};

#endif
