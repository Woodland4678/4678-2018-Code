// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#ifndef MANIPULATORARM_H
#define MANIPULATORARM_H
#include "Commands/Subsystem.h"
#include "WPILib.h"

/**
 *
 *
 * @author ExampleAuthor
 */
class ManipulatorArm: public frc::Subsystem {
private:
	// It's desirable that everything possible is private except
	// for methods that implement subsystem capabilities
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	std::shared_ptr<WPI_TalonSRX> shoulder;
	std::shared_ptr<WPI_TalonSRX> elbow;
	std::shared_ptr<WPI_TalonSRX> wrist;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
	double shoulderNewSet;
	double conShoulder_EtA_M;
	double conShoulder_EtA_B;
	double conShoulder_AtE_M;
	double conShoulder_AtE_B;
	double conElbow_EtA_M;
	double conElbow_EtA_B;
	double conElbow_AtE_M;
	double conElbow_AtE_B;
	double conWrist_EtA_M;
	double conWrist_EtA_B;
	double conWrist_AtE_M;
	double conWrist_AtE_B;

	double origTimeStamp;
	double shoulderStartPos;
	double elbowStartPos;
	double wristStartPos;
public:
	ManipulatorArm();
	void InitDefaultCommand() override;
	void Periodic() override;
	double getShoulderAngular();
	double getWristAngular();
	double getElbowAngular();
	void setShoulderPosition(double position);
	void setElbowPosition(double position);
	void setWristPosition(double position);
	bool shoulderGoToPosition(double start, double position, double current, double time);
	bool elbowGoToPosition(double start, double position, double current, double time);
	bool wristGoToPosition(double start, double position, double current, double time);
	double convertShoulderToAngle(double encoder);
	double convertElbowToAngle(double encoder);
	double convertWristToAngle(double encoder);
	double convertShoulderToEncoder(double angle);
	double convertElbowToEncoder(double angle);
	double convertWristToEncoder(double angle);
	void initMovement();
	bool pickUpCube();
	void setShoulderPID(double p, double i, double d);
	void setElbowPID(double p, double i, double d);
	void setWristPID(double p, double i, double d);
	// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTANTS
};

#endif
