// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "DriveRobot.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

DriveRobot::DriveRobot(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::driveTrain.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void DriveRobot::Initialize() {
#ifdef XBOXCONTROLTHROTTLES
	throttleForward = Robot::oi->getdriver()->GetRawAxis(3);
	throttleBackward = Robot::oi->getdriver()->GetRawAxis(2);
	turnThrottle = Robot::oi->getdriver()->GetRawAxis(0);
	throttle = 0;
#else
	JoyX = Robot::oi->getdriver()->GetX();
	JoyY = Robot::oi->getdriver()->GetY();
#endif
}

// Called repeatedly when this Command is scheduled to run
void DriveRobot::Execute() {
	Robot::driveTrain->enableCompressor();
	frc::SmartDashboard::PutNumber("Left Encoder", Robot::driveTrain->getLeftEncoder()->Get());
	frc::SmartDashboard::PutNumber("Right Encoder",Robot::driveTrain->getRightEncoder()->Get());

//	if (Robot::oi->getdriver()->GetRawButton(5)) {
//		Robot::driveTrain->shiftDown();
//	}
//	if(Robot::oi->getdriver()->GetRawButton(6)) {
//		Robot::driveTrain->shiftUp();
//	}
#ifdef XBOXCONTROLTHROTTLES
	throttleForward = Robot::oi->getdriver()->GetRawAxis(3);
	throttleBackward = Robot::oi->getdriver()->GetRawAxis(2);
	turnThrottle = Robot::oi->getdriver()->GetRawAxis(0);

	throttle = throttleForward-throttleBackward;

	if((turnThrottle < 0.15) && (turnThrottle > -0.15))
		turnThrottle = 0; //This is your dead zone good sir!

	Robot::driveTrain->SetLeftPower(throttle + turnThrottle);
	Robot::driveTrain->SetRightPower(throttle - turnThrottle);
#else
	JoyX = Robot::oi->getdriver()->GetX();
	JoyY = Robot::oi->getdriver()->GetY();

	if (Robot::driveTrain->highGear)
		JoyX *= 0.5;

	if(JoyX < 0.05 && JoyX > -0.05)
		JoyX = 0;

	double leftPower = -(JoyY - 0.75 * JoyX);
	double rightPower = -(JoyY + 0.75 * JoyX);

	if(((Robot::manipulatorArm->targetPos > 0) && (Robot::manipulatorArm->targetPos < 5))&&(Robot::manipulatorArm->checkForCube()))
		{
		leftPower *= 0.4;
		rightPower *= 0.4;
		}

	Robot::driveTrain->SetLeftPower(leftPower);
	Robot::driveTrain->SetRightPower(rightPower);
#endif
}

// Make this return true when this Command no longer needs to run execute()
bool DriveRobot::IsFinished() {
    return false;
}

// Called once after isFinished returns true
void DriveRobot::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void DriveRobot::Interrupted() {

}
