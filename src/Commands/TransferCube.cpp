// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// C++ from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


#include "TransferCube.h"

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

TransferCube::TransferCube(): frc::Command() {
        // Use requires() here to declare subsystem dependencies
    // eg. requires(Robot::chassis.get());
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
	Requires(Robot::intake.get());
    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=REQUIRES
}// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTOR

// Called just before this Command runs the first time
void TransferCube::Initialize() {
	done = false;
	done2 = false;
	done3 = true;//false;
	done4 = false;
	done5 = false;
	count = 0;
	totalCount = 0;
}

// Called repeatedly when this Command is scheduled to run
void TransferCube::Execute() {
	//Lets check some stuff first
	//totalCount++;
	//if(totalCount > 100)
	//	done = true;
	//Is the cube lined up correctly?
	if(Robot::intake->checkPosition() == Robot::intake->IntakePositions::InRobot)
		{
		done3 = false;
		done = true;
		return;
		}
	Robot::intake->stopWheels();
	//Is the arm in pickup location?
	if((Robot::manipulatorArm->currPos != 5)&&!done2) //If not
		done2 = Robot::manipulatorArm->moveTo(5);
	else
		done2 = true;
	if(done2 && done3)
		{
		if(!done4)
			done4 = Robot::intake->moveTo(2);
		//Check for cube
		if(Robot::manipulatorArm->checkForCube())
			count++;
		if(count >= 10)
			{
			Robot::manipulatorArm->squeeze();
			done4 = true;
			}
		if(count >= 25)
			Robot::intake->release();
		if((count >= 35)&&(!done5))
			done5 = Robot::manipulatorArm->moveTo(11);
		}
	if(done5)
		done = Robot::intake->moveTo(0);

}

// Make this return true when this Command no longer needs to run execute()
bool TransferCube::IsFinished() {
    return done;
}

// Called once after isFinished returns true
void TransferCube::End() {

}

// Called when another command which requires one or more of the same
// subsystems is scheduled to run
void TransferCube::Interrupted() {

}
