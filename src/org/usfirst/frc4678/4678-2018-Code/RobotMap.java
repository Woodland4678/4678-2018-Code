// RobotBuilder Version: 2.0
//
// This file was generated by RobotBuilder. It contains sections of
// code that are automatically generated and assigned by robotbuilder.
// These sections will be updated in the future when you export to
// Java from RobotBuilder. Do not put any code or make any change in
// the blocks indicating autogenerated code or it will be lost on an
// update. Deleting the comments indicating the section will prevent
// it from being updated in the future.


package org.usfirst.frc4678.4678-2018-Code;

// BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import com.ctre.phoenix.motorcontrol.can.WPI_TalonSRX;
import com.ctre.phoenix.motorcontrol.can.WPI_VictorSPX;
import edu.wpi.first.wpilibj.Compressor;
import edu.wpi.first.wpilibj.CounterBase.EncodingType;
import edu.wpi.first.wpilibj.DoubleSolenoid;
import edu.wpi.first.wpilibj.Encoder;
import edu.wpi.first.wpilibj.PIDSourceType;
import edu.wpi.first.wpilibj.Solenoid;
import edu.wpi.first.wpilibj.SpeedController;
import edu.wpi.first.wpilibj.VictorSP;

// END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=IMPORTS
import edu.wpi.first.wpilibj.livewindow.LiveWindow;

/**
 * The RobotMap is a mapping from the ports sensors and actuators are wired into
 * to a variable name. This provides flexibility changing wiring, makes checking
 * the wiring easier and significantly reduces the number of magic numbers
 * floating around.
 */
public class RobotMap {
    // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS
    public static SpeedController driveTrainrightMotor;
    public static SpeedController driveTrainleftMotor;
    public static Encoder driveTrainrightEncoderDrive;
    public static Encoder driveTrainleftEncoderDrive;
    public static Compressor driveTrainCompressor;
    public static DoubleSolenoid driveTrainshifter;
    public static WPI_TalonSRX manipulatorArmshoulder;
    public static WPI_TalonSRX manipulatorArmelbow;
    public static WPI_TalonSRX manipulatorArmwrist;
    public static WPI_VictorSPX manipulatorArmshoulderSlave;
    public static WPI_VictorSPX manipulatorArmelbowSlave;
    public static DoubleSolenoid manipulatorArmclaw;
    public static WPI_TalonSRX intakelifter;
    public static SpeedController intakerightWheels;
    public static SpeedController intakeleftWheels;
    public static Solenoid intakereleaser;

    // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=DECLARATIONS

    public static void init() {
        // BEGIN AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
        driveTrainrightMotor = new VictorSP(1);
        LiveWindow.addActuator("DriveTrain", "rightMotor", (VictorSP) driveTrainrightMotor);
        driveTrainrightMotor.setInverted(false);
        driveTrainleftMotor = new VictorSP(0);
        LiveWindow.addActuator("DriveTrain", "leftMotor", (VictorSP) driveTrainleftMotor);
        driveTrainleftMotor.setInverted(false);
        driveTrainrightEncoderDrive = new Encoder(0, 1, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "rightEncoderDrive", driveTrainrightEncoderDrive);
        driveTrainrightEncoderDrive.setDistancePerPulse(1.0);
        driveTrainrightEncoderDrive.setPIDSourceType(PIDSourceType.kRate);
        driveTrainleftEncoderDrive = new Encoder(2, 3, false, EncodingType.k4X);
        LiveWindow.addSensor("DriveTrain", "leftEncoderDrive", driveTrainleftEncoderDrive);
        driveTrainleftEncoderDrive.setDistancePerPulse(1.0);
        driveTrainleftEncoderDrive.setPIDSourceType(PIDSourceType.kRate);
        driveTrainCompressor = new Compressor(0);
        LiveWindow.addActuator("DriveTrain", "Compressor", driveTrainCompressor);
        
        driveTrainshifter = new DoubleSolenoid(0, 2, 3);
        LiveWindow.addActuator("DriveTrain", "shifter", driveTrainshifter);
        
        manipulatorArmshoulder = new WPI_TalonSRX(3);
        
        
        manipulatorArmelbow = new WPI_TalonSRX(5);
        
        
        manipulatorArmwrist = new WPI_TalonSRX(2);
        
        
        manipulatorArmshoulderSlave = new WPI_VictorSPX(4);
        
        
        manipulatorArmelbowSlave = new WPI_VictorSPX(6);
        
        
        manipulatorArmclaw = new DoubleSolenoid(0, 0, 1);
        LiveWindow.addActuator("ManipulatorArm", "claw", manipulatorArmclaw);
        
        intakelifter = new WPI_TalonSRX(1);
        
        
        intakerightWheels = new VictorSP(2);
        LiveWindow.addActuator("Intake", "rightWheels", (VictorSP) intakerightWheels);
        intakerightWheels.setInverted(false);
        intakeleftWheels = new VictorSP(3);
        LiveWindow.addActuator("Intake", "leftWheels", (VictorSP) intakeleftWheels);
        intakeleftWheels.setInverted(false);
        intakereleaser = new Solenoid(0, 4);
        LiveWindow.addActuator("Intake", "releaser", intakereleaser);
        

        // END AUTOGENERATED CODE, SOURCE=ROBOTBUILDER ID=CONSTRUCTORS
    }
}
